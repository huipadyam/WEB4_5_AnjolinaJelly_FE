/* tslint:disable */
/* eslint-disable */
/**
 * zzirit API
 * 찌릿 API 명세서
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseEmpty,
  BaseResponseString,
  PaymentRequestDto,
} from '../models/index';
import {
    BaseResponseEmptyFromJSON,
    BaseResponseEmptyToJSON,
    BaseResponseStringFromJSON,
    BaseResponseStringToJSON,
    PaymentRequestDtoFromJSON,
    PaymentRequestDtoToJSON,
} from '../models/index';

export interface ConfirmPaymentRequest {
    paymentKey: string;
    orderId: string;
    amount: string;
}

export interface FailPaymentRequest {
    code?: string;
    message?: string;
    orderId?: string;
}

export interface InitOrderRequest {
    paymentRequestDto: PaymentRequestDto;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     * 결제 성공 시 주문을 확정 처리합니다.
     * 결제 성공
     */
    async confirmPaymentRaw(requestParameters: ConfirmPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['paymentKey'] == null) {
            throw new runtime.RequiredError(
                'paymentKey',
                'Required parameter "paymentKey" was null or undefined when calling confirmPayment().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling confirmPayment().'
            );
        }

        if (requestParameters['amount'] == null) {
            throw new runtime.RequiredError(
                'amount',
                'Required parameter "amount" was null or undefined when calling confirmPayment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['paymentKey'] != null) {
            queryParameters['paymentKey'] = requestParameters['paymentKey'];
        }

        if (requestParameters['orderId'] != null) {
            queryParameters['orderId'] = requestParameters['orderId'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/payments/toss/success`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 결제 성공 시 주문을 확정 처리합니다.
     * 결제 성공
     */
    async confirmPayment(requestParameters: ConfirmPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.confirmPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제 실패 또는 사용자 취소 시 임시 주문이 삭제됩니다.
     * 결제 실패
     */
    async failPaymentRaw(requestParameters: FailPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseString>> {
        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        if (requestParameters['orderId'] != null) {
            queryParameters['orderId'] = requestParameters['orderId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/payments/toss/fail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseStringFromJSON(jsonValue));
    }

    /**
     * 결제 실패 또는 사용자 취소 시 임시 주문이 삭제됩니다.
     * 결제 실패
     */
    async failPayment(requestParameters: FailPaymentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseString> {
        const response = await this.failPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제를 위한 주문번호를 생성하고 임시 주문을 저장합니다.
     * 주문번호 생성
     */
    async initOrderRaw(requestParameters: InitOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseString>> {
        if (requestParameters['paymentRequestDto'] == null) {
            throw new runtime.RequiredError(
                'paymentRequestDto',
                'Required parameter "paymentRequestDto" was null or undefined when calling initOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/payments/init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentRequestDtoToJSON(requestParameters['paymentRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseStringFromJSON(jsonValue));
    }

    /**
     * 결제를 위한 주문번호를 생성하고 임시 주문을 저장합니다.
     * 주문번호 생성
     */
    async initOrder(requestParameters: InitOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseString> {
        const response = await this.initOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
