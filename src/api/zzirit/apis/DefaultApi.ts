/* tslint:disable */
/* eslint-disable */
/**
 * zzirit API
 * 찌릿 API 명세서
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseEmpty,
  BaseResponseMyPageInfoDTO,
  EmailAuthDTO,
  EmailAuthVerificationDTO,
  MyPageAddressUpdateDTO,
  SignupDTO,
  SocialSignupDTO,
} from '../models/index';
import {
    BaseResponseEmptyFromJSON,
    BaseResponseEmptyToJSON,
    BaseResponseMyPageInfoDTOFromJSON,
    BaseResponseMyPageInfoDTOToJSON,
    EmailAuthDTOFromJSON,
    EmailAuthDTOToJSON,
    EmailAuthVerificationDTOFromJSON,
    EmailAuthVerificationDTOToJSON,
    MyPageAddressUpdateDTOFromJSON,
    MyPageAddressUpdateDTOToJSON,
    SignupDTOFromJSON,
    SignupDTOToJSON,
    SocialSignupDTOFromJSON,
    SocialSignupDTOToJSON,
} from '../models/index';

export interface CompleteSignupRequest {
    socialSignupDTO: SocialSignupDTO;
}

export interface SendEmailVerificationCodeRequest {
    emailAuthDTO: EmailAuthDTO;
}

export interface SignupRequest {
    signupDTO: SignupDTO;
}

export interface UpdateAddressRequest {
    myPageAddressUpdateDTO: MyPageAddressUpdateDTO;
}

export interface VerifyEmailCodeRequest {
    emailAuthVerificationDTO: EmailAuthVerificationDTO;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 로그인 인증 상태 확인
     */
    async checkAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/info/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 로그인 인증 상태 확인
     */
    async checkAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.checkAuthRaw(initOverrides);
        return await response.value();
    }

    /**
     * 임시 회원가입 토큰 유효성 검증
     */
    async checkTempTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/info/temp-check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 임시 회원가입 토큰 유효성 검증
     */
    async checkTempToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.checkTempTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * 소셜 회원가입 최종 처리
     */
    async completeSignupRaw(requestParameters: CompleteSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['socialSignupDTO'] == null) {
            throw new runtime.RequiredError(
                'socialSignupDTO',
                'Required parameter "socialSignupDTO" was null or undefined when calling completeSignup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/social-signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialSignupDTOToJSON(requestParameters['socialSignupDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 소셜 회원가입 최종 처리
     */
    async completeSignup(requestParameters: CompleteSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.completeSignupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원의 이름 및 주소 정보를 조회합니다.
     * 내 정보 조회
     */
    async getMyPageInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseMyPageInfoDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/mypage/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseMyPageInfoDTOFromJSON(jsonValue));
    }

    /**
     * 회원의 이름 및 주소 정보를 조회합니다.
     * 내 정보 조회
     */
    async getMyPageInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseMyPageInfoDTO> {
        const response = await this.getMyPageInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 이메일 인증 코드 전송
     */
    async sendEmailVerificationCodeRaw(requestParameters: SendEmailVerificationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['emailAuthDTO'] == null) {
            throw new runtime.RequiredError(
                'emailAuthDTO',
                'Required parameter "emailAuthDTO" was null or undefined when calling sendEmailVerificationCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/send-email-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailAuthDTOToJSON(requestParameters['emailAuthDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 이메일 인증 코드 전송
     */
    async sendEmailVerificationCode(requestParameters: SendEmailVerificationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.sendEmailVerificationCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 자체 회원가입
     */
    async signupRaw(requestParameters: SignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['signupDTO'] == null) {
            throw new runtime.RequiredError(
                'signupDTO',
                'Required parameter "signupDTO" was null or undefined when calling signup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupDTOToJSON(requestParameters['signupDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 자체 회원가입
     */
    async signup(requestParameters: SignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.signupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원의 주소 및 상세주소를 수정합니다.
     * 주소 수정
     */
    async updateAddressRaw(requestParameters: UpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['myPageAddressUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'myPageAddressUpdateDTO',
                'Required parameter "myPageAddressUpdateDTO" was null or undefined when calling updateAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/mypage/address`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MyPageAddressUpdateDTOToJSON(requestParameters['myPageAddressUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 회원의 주소 및 상세주소를 수정합니다.
     * 주소 수정
     */
    async updateAddress(requestParameters: UpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.updateAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일 인증 코드 검증
     */
    async verifyEmailCodeRaw(requestParameters: VerifyEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['emailAuthVerificationDTO'] == null) {
            throw new runtime.RequiredError(
                'emailAuthVerificationDTO',
                'Required parameter "emailAuthVerificationDTO" was null or undefined when calling verifyEmailCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailAuthVerificationDTOToJSON(requestParameters['emailAuthVerificationDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 이메일 인증 코드 검증
     */
    async verifyEmailCode(requestParameters: VerifyEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.verifyEmailCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
