/* tslint:disable */
/* eslint-disable */
/**
 * zzirit API
 * 찌릿 API 명세서
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressUpdateRequest,
  BaseResponseEmpty,
  BaseResponseMyPageInfoResponse,
  EmailAuthRequest,
  EmailAuthVerifyRequest,
  SignupRequest,
  SocialSignupRequest,
} from '../models/index';
import {
    AddressUpdateRequestFromJSON,
    AddressUpdateRequestToJSON,
    BaseResponseEmptyFromJSON,
    BaseResponseEmptyToJSON,
    BaseResponseMyPageInfoResponseFromJSON,
    BaseResponseMyPageInfoResponseToJSON,
    EmailAuthRequestFromJSON,
    EmailAuthRequestToJSON,
    EmailAuthVerifyRequestFromJSON,
    EmailAuthVerifyRequestToJSON,
    SignupRequestFromJSON,
    SignupRequestToJSON,
    SocialSignupRequestFromJSON,
    SocialSignupRequestToJSON,
} from '../models/index';

export interface CompleteSignupRequest {
    socialSignupRequest: SocialSignupRequest;
}

export interface SendEmailVerificationCodeRequest {
    emailAuthRequest: EmailAuthRequest;
}

export interface SignupOperationRequest {
    signupRequest: SignupRequest;
}

export interface UpdateAddressRequest {
    addressUpdateRequest: AddressUpdateRequest;
}

export interface VerifyEmailCodeRequest {
    emailAuthVerifyRequest: EmailAuthVerifyRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 로그인 인증 상태 확인
     */
    async checkAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/info/check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 로그인 인증 상태 확인
     */
    async checkAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.checkAuthRaw(initOverrides);
        return await response.value();
    }

    /**
     * 임시 회원가입 토큰 유효성 검증
     */
    async checkTempTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/info/temp-check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 임시 회원가입 토큰 유효성 검증
     */
    async checkTempToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.checkTempTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * 소셜 회원가입 최종 처리
     */
    async completeSignupRaw(requestParameters: CompleteSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['socialSignupRequest'] == null) {
            throw new runtime.RequiredError(
                'socialSignupRequest',
                'Required parameter "socialSignupRequest" was null or undefined when calling completeSignup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/social-signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialSignupRequestToJSON(requestParameters['socialSignupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 소셜 회원가입 최종 처리
     */
    async completeSignup(requestParameters: CompleteSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.completeSignupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원의 이름 및 주소 정보를 조회합니다.
     * 내 정보 조회
     */
    async getMyPageInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseMyPageInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/mypage/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseMyPageInfoResponseFromJSON(jsonValue));
    }

    /**
     * 회원의 이름 및 주소 정보를 조회합니다.
     * 내 정보 조회
     */
    async getMyPageInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseMyPageInfoResponse> {
        const response = await this.getMyPageInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 이메일 인증 코드 전송
     */
    async sendEmailVerificationCodeRaw(requestParameters: SendEmailVerificationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['emailAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'emailAuthRequest',
                'Required parameter "emailAuthRequest" was null or undefined when calling sendEmailVerificationCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/send-email-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailAuthRequestToJSON(requestParameters['emailAuthRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 이메일 인증 코드 전송
     */
    async sendEmailVerificationCode(requestParameters: SendEmailVerificationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.sendEmailVerificationCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 자체 회원가입
     */
    async signupRaw(requestParameters: SignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['signupRequest'] == null) {
            throw new runtime.RequiredError(
                'signupRequest',
                'Required parameter "signupRequest" was null or undefined when calling signup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestToJSON(requestParameters['signupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 자체 회원가입
     */
    async signup(requestParameters: SignupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.signupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회원의 주소 및 상세주소를 수정합니다.
     * 주소 수정
     */
    async updateAddressRaw(requestParameters: UpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['addressUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'addressUpdateRequest',
                'Required parameter "addressUpdateRequest" was null or undefined when calling updateAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/mypage/address`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AddressUpdateRequestToJSON(requestParameters['addressUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 회원의 주소 및 상세주소를 수정합니다.
     * 주소 수정
     */
    async updateAddress(requestParameters: UpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.updateAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일 인증 코드 검증
     */
    async verifyEmailCodeRaw(requestParameters: VerifyEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['emailAuthVerifyRequest'] == null) {
            throw new runtime.RequiredError(
                'emailAuthVerifyRequest',
                'Required parameter "emailAuthVerifyRequest" was null or undefined when calling verifyEmailCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailAuthVerifyRequestToJSON(requestParameters['emailAuthVerifyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 이메일 인증 코드 검증
     */
    async verifyEmailCode(requestParameters: VerifyEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.verifyEmailCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
