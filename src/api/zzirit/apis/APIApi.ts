/* tslint:disable */
/* eslint-disable */
/**
 * zzirit API
 * 찌릿 API 명세서
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponse,
  BaseResponseEmpty,
  BaseResponseImageUploadResponse,
  BaseResponseItemResponse,
  BaseResponseListAdminItemResponse,
  BaseResponseListBrandResponse,
  BaseResponseListOrderFetchResponse,
  BaseResponseListSimpleItemResponse,
  BaseResponseListTypeResponse,
  CartItemAddRequest,
  CartItemResponse,
  CartResponse,
  ItemCreateRequest,
  OrderCreateRequest,
  TimeDealCreateResponse,
  TimeDealModalItem,
  UploadImageRequest,
} from '../models/index';
import {
    BaseResponseFromJSON,
    BaseResponseToJSON,
    BaseResponseEmptyFromJSON,
    BaseResponseEmptyToJSON,
    BaseResponseImageUploadResponseFromJSON,
    BaseResponseImageUploadResponseToJSON,
    BaseResponseItemResponseFromJSON,
    BaseResponseItemResponseToJSON,
    BaseResponseListAdminItemResponseFromJSON,
    BaseResponseListAdminItemResponseToJSON,
    BaseResponseListBrandResponseFromJSON,
    BaseResponseListBrandResponseToJSON,
    BaseResponseListOrderFetchResponseFromJSON,
    BaseResponseListOrderFetchResponseToJSON,
    BaseResponseListSimpleItemResponseFromJSON,
    BaseResponseListSimpleItemResponseToJSON,
    BaseResponseListTypeResponseFromJSON,
    BaseResponseListTypeResponseToJSON,
    CartItemAddRequestFromJSON,
    CartItemAddRequestToJSON,
    CartItemResponseFromJSON,
    CartItemResponseToJSON,
    CartResponseFromJSON,
    CartResponseToJSON,
    ItemCreateRequestFromJSON,
    ItemCreateRequestToJSON,
    OrderCreateRequestFromJSON,
    OrderCreateRequestToJSON,
    TimeDealCreateResponseFromJSON,
    TimeDealCreateResponseToJSON,
    TimeDealModalItemFromJSON,
    TimeDealModalItemToJSON,
    UploadImageRequestFromJSON,
    UploadImageRequestToJSON,
} from '../models/index';

export interface AddItemRequest {
    itemCreateRequest: ItemCreateRequest;
}

export interface AddItemToCartRequest {
    cartItemAddRequest: CartItemAddRequest;
}

export interface CancelOrderRequest {
    orderId: number;
}

export interface CreateOrderRequest {
    orderCreateRequest: OrderCreateRequest;
}

export interface CreateTimeDealRequest {
    requestBody: { [key: string]: object; };
}

export interface DeleteItemRequest {
    itemId: number;
}

export interface FindBrandByTypeRequest {
    typeId: number;
}

export interface GetByIdRequest {
    itemId: number;
}

export interface GetTimeDealModalItemsRequest {
    requestBody: Array<number>;
}

export interface RemoveItemFromCartRequest {
    itemId: number;
}

export interface SearchRequest {
    type?: Array<string>;
    brands?: Array<string>;
    keyword?: string;
    sort?: string;
}

export interface SearchItemsRequest {
    name?: string;
    itemId?: number;
}

export interface UpdateItemRequest {
    itemId: number;
    itemCreateRequest: ItemCreateRequest;
}

export interface UploadImageOperationRequest {
    itemId: number;
    uploadImageRequest?: UploadImageRequest;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * 관리자가 상품을 등록합니다.
     * 관리자 상품 등록
     */
    async addItemRaw(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'itemCreateRequest',
                'Required parameter "itemCreateRequest" was null or undefined when calling addItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemCreateRequestToJSON(requestParameters['itemCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 관리자가 상품을 등록합니다.
     * 관리자 상품 등록
     */
    async addItem(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.addItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품 ID와 수량을 전달받아 장바구니에 항목을 추가합니다.
     * 장바구니에 상품 추가
     */
    async addItemToCartRaw(requestParameters: AddItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItemResponse>> {
        if (requestParameters['cartItemAddRequest'] == null) {
            throw new runtime.RequiredError(
                'cartItemAddRequest',
                'Required parameter "cartItemAddRequest" was null or undefined when calling addItemToCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemAddRequestToJSON(requestParameters['cartItemAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemResponseFromJSON(jsonValue));
    }

    /**
     * 상품 ID와 수량을 전달받아 장바구니에 항목을 추가합니다.
     * 장바구니에 상품 추가
     */
    async addItemToCart(requestParameters: AddItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItemResponse> {
        const response = await this.addItemToCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orderId에 해당되는 주문을 취소합니다.
     * 주문 취소 API
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling cancelOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{order-id}`.replace(`{${"order-id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * orderId에 해당되는 주문을 취소합니다.
     * 주문 취소 API
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 주문 하나를 생성합니다.
     * 주문 생성 API
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['orderCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'orderCreateRequest',
                'Required parameter "orderCreateRequest" was null or undefined when calling createOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateRequestToJSON(requestParameters['orderCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 주문 하나를 생성합니다.
     * 주문 생성 API
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 타임딜 정보와 아이템 리스트를 등록합니다.
     * 타임딜 등록
     */
    async createTimeDealRaw(requestParameters: CreateTimeDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeDealCreateResponse>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling createTimeDeal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/time-deal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeDealCreateResponseFromJSON(jsonValue));
    }

    /**
     * 타임딜 정보와 아이템 리스트를 등록합니다.
     * 타임딜 등록
     */
    async createTimeDeal(requestParameters: CreateTimeDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeDealCreateResponse> {
        const response = await this.createTimeDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 id로 상품을 삭제합니다.
     * 관리자 상품 삭제
     */
    async deleteItemRaw(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/item/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 관리자가 id로 상품을 삭제합니다.
     * 관리자 상품 삭제
     */
    async deleteItem(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.deleteItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 전체 주문을 조회합니다.
     * 주문 전체 조회 API
     */
    async fetchAllOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListOrderFetchResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListOrderFetchResponseFromJSON(jsonValue));
    }

    /**
     * 전체 주문을 조회합니다.
     * 주문 전체 조회 API
     */
    async fetchAllOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListOrderFetchResponse> {
        const response = await this.fetchAllOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     * 상품 종류 Id에 맞는 브랜드를 조회합니다.
     * 상품 종류에 따른 브랜드 조회
     */
    async findBrandByTypeRaw(requestParameters: FindBrandByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListBrandResponse>> {
        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling findBrandByType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/brands/{type-id}`.replace(`{${"type-id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListBrandResponseFromJSON(jsonValue));
    }

    /**
     * 상품 종류 Id에 맞는 브랜드를 조회합니다.
     * 상품 종류에 따른 브랜드 조회
     */
    async findBrandByType(requestParameters: FindBrandByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListBrandResponse> {
        const response = await this.findBrandByTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품 종류를 전체 조회 합니다.
     * 상품 종류 전체 조회
     */
    async findTypeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListTypeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListTypeResponseFromJSON(jsonValue));
    }

    /**
     * 상품 종류를 전체 조회 합니다.
     * 상품 종류 전체 조회
     */
    async findType(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListTypeResponse> {
        const response = await this.findTypeRaw(initOverrides);
        return await response.value();
    }

    /**
     * 상품을 상세 조회 합니다.
     * 상품 상세 조회
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseItemResponse>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/{item-id}`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseItemResponseFromJSON(jsonValue));
    }

    /**
     * 상품을 상세 조회 합니다.
     * 상품 상세 조회
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseItemResponse> {
        const response = await this.getByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 진행 중인 타임딜
     */
    async getCurrentTimeDealsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/time-deal/now`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 현재 진행 중인 타임딜
     */
    async getCurrentTimeDeals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCurrentTimeDealsRaw(initOverrides);
    }

    /**
     * 현재 로그인된 사용자의 장바구니를 조회합니다.
     * 내 장바구니 조회
     */
    async getMyCartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartResponseFromJSON(jsonValue));
    }

    /**
     * 현재 로그인된 사용자의 장바구니를 조회합니다.
     * 내 장바구니 조회
     */
    async getMyCart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartResponse> {
        const response = await this.getMyCartRaw(initOverrides);
        return await response.value();
    }

    /**
     * 타임딜 생성 모달 상품 조회
     */
    async getTimeDealModalItemsRaw(requestParameters: GetTimeDealModalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeDealModalItem>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling getTimeDealModalItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/time-deal/modal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeDealModalItemFromJSON));
    }

    /**
     * 타임딜 생성 모달 상품 조회
     */
    async getTimeDealModalItems(requestParameters: GetTimeDealModalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeDealModalItem>> {
        const response = await this.getTimeDealModalItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 장바구니에서 항목을 제거합니다.
     * 장바구니 항목 삭제
     */
    async removeItemFromCartRaw(requestParameters: RemoveItemFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling removeItemFromCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 장바구니에서 항목을 제거합니다.
     * 장바구니 항목 삭제
     */
    async removeItemFromCart(requestParameters: RemoveItemFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeItemFromCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품을 조회하고 검색합니다.
     * 상품 조회 및 검색
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListSimpleItemResponse>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['brands'] != null) {
            queryParameters['brands'] = requestParameters['brands'];
        }

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListSimpleItemResponseFromJSON(jsonValue));
    }

    /**
     * 상품을 조회하고 검색합니다.
     * 상품 조회 및 검색
     */
    async search(requestParameters: SearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListSimpleItemResponse> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 id/이름으로 상품 목록을 조회합니다.
     * 관리자 상품 조회 & 검색
     */
    async searchItemsRaw(requestParameters: SearchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListAdminItemResponse>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['itemId'] != null) {
            queryParameters['itemId'] = requestParameters['itemId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/item`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListAdminItemResponseFromJSON(jsonValue));
    }

    /**
     * 관리자가 id/이름으로 상품 목록을 조회합니다.
     * 관리자 상품 조회 & 검색
     */
    async searchItems(requestParameters: SearchItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListAdminItemResponse> {
        const response = await this.searchItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * (관리자 페이지)타임딜 목록 조회
     */
    async searchTimeDealsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/time-deal/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * (관리자 페이지)타임딜 목록 조회
     */
    async searchTimeDeals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.searchTimeDealsRaw(initOverrides);
    }

    /**
     * 관리자가 id로 상품을 수정합니다.
     * 관리자 상품 수정
     */
    async updateItemRaw(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateItem().'
            );
        }

        if (requestParameters['itemCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'itemCreateRequest',
                'Required parameter "itemCreateRequest" was null or undefined when calling updateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/item/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemCreateRequestToJSON(requestParameters['itemCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 관리자가 id로 상품을 수정합니다.
     * 관리자 상품 수정
     */
    async updateItem(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.updateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 id로 상품 이미지를 업로드합니다.
     * 관리자 상품 이미지  업로드
     */
    async uploadImageRaw(requestParameters: UploadImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseImageUploadResponse>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling uploadImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/item/{itemId}/image`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadImageRequestToJSON(requestParameters['uploadImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseImageUploadResponseFromJSON(jsonValue));
    }

    /**
     * 관리자가 id로 상품 이미지를 업로드합니다.
     * 관리자 상품 이미지  업로드
     */
    async uploadImage(requestParameters: UploadImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseImageUploadResponse> {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
