/* tslint:disable */
/* eslint-disable */
/**
 * zzirit API
 * 찌릿 API 명세서
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCartFetchResponse,
  BaseResponseCartItemFetchResponse,
  BaseResponseEmpty,
  BaseResponseImageUploadResponse,
  BaseResponseItemFetchResponse,
  BaseResponseListBrandFetchResponse,
  BaseResponseListTypeFetchResponse,
  BaseResponseObject,
  BaseResponsePageResponseAdminItemFetchResponse,
  BaseResponsePageResponseCurrentTimeDealFetchResponse,
  BaseResponsePageResponseItemFetchQueryResponse,
  BaseResponsePageResponseOrderFetchResponse,
  BaseResponsePageResponseTimeDealFetchResponse,
  BaseResponseTimeDealCreateResponse,
  CartItemCreateRequest,
  CartItemDeleteRequest,
  ItemCreateRequest,
  ItemUpdateRequest,
  TimeDealCreateRequest,
} from '../models/index';
import {
    BaseResponseCartFetchResponseFromJSON,
    BaseResponseCartFetchResponseToJSON,
    BaseResponseCartItemFetchResponseFromJSON,
    BaseResponseCartItemFetchResponseToJSON,
    BaseResponseEmptyFromJSON,
    BaseResponseEmptyToJSON,
    BaseResponseImageUploadResponseFromJSON,
    BaseResponseImageUploadResponseToJSON,
    BaseResponseItemFetchResponseFromJSON,
    BaseResponseItemFetchResponseToJSON,
    BaseResponseListBrandFetchResponseFromJSON,
    BaseResponseListBrandFetchResponseToJSON,
    BaseResponseListTypeFetchResponseFromJSON,
    BaseResponseListTypeFetchResponseToJSON,
    BaseResponseObjectFromJSON,
    BaseResponseObjectToJSON,
    BaseResponsePageResponseAdminItemFetchResponseFromJSON,
    BaseResponsePageResponseAdminItemFetchResponseToJSON,
    BaseResponsePageResponseCurrentTimeDealFetchResponseFromJSON,
    BaseResponsePageResponseCurrentTimeDealFetchResponseToJSON,
    BaseResponsePageResponseItemFetchQueryResponseFromJSON,
    BaseResponsePageResponseItemFetchQueryResponseToJSON,
    BaseResponsePageResponseOrderFetchResponseFromJSON,
    BaseResponsePageResponseOrderFetchResponseToJSON,
    BaseResponsePageResponseTimeDealFetchResponseFromJSON,
    BaseResponsePageResponseTimeDealFetchResponseToJSON,
    BaseResponseTimeDealCreateResponseFromJSON,
    BaseResponseTimeDealCreateResponseToJSON,
    CartItemCreateRequestFromJSON,
    CartItemCreateRequestToJSON,
    CartItemDeleteRequestFromJSON,
    CartItemDeleteRequestToJSON,
    ItemCreateRequestFromJSON,
    ItemCreateRequestToJSON,
    ItemUpdateRequestFromJSON,
    ItemUpdateRequestToJSON,
    TimeDealCreateRequestFromJSON,
    TimeDealCreateRequestToJSON,
} from '../models/index';

export interface AddItemToCartRequest {
    cartItemCreateRequest: CartItemCreateRequest;
}

export interface CancelOrderRequest {
    orderId: number;
}

export interface CreateItemRequest {
    itemCreateRequest: ItemCreateRequest;
}

export interface CreateTimeDealRequest {
    timeDealCreateRequest: TimeDealCreateRequest;
}

export interface DecreaseQuantityRequest {
    itemId: number;
}

export interface DeleteItemRequest {
    itemId: number;
}

export interface FetchAllOrdersRequest {
    page?: number;
    size?: number;
    sort?: string;
}

export interface FindBrandByTypeRequest {
    typeId: number;
}

export interface GetByIdRequest {
    itemId: number;
}

export interface GetCurrentTimeDealsRequest {
    page?: number;
    size?: number;
}

export interface GetItemRequest {
    itemId: number;
}

export interface GetItemsRequest {
    name?: string;
    sort?: string;
    page?: number;
    size?: number;
}

export interface IncreaseQuantityRequest {
    itemId: number;
}

export interface RemoveItemToCartRequest {
    itemId: number;
}

export interface RemoveSelectedItemsRequest {
    cartItemDeleteRequest: CartItemDeleteRequest;
}

export interface SearchRequest {
    types?: string;
    brands?: string;
    keyword?: string;
    sort?: string;
    page?: number;
    size?: number;
}

export interface SearchTimeDealsRequest {
    timeDealName?: string;
    timeDealId?: number;
    timeDealItemName?: string;
    timeDealItemId?: number;
    status?: SearchTimeDealsStatusEnum;
    page?: number;
    size?: number;
}

export interface UpdateImageRequest {
    itemId: number;
    image: Blob;
}

export interface UpdateItemRequest {
    itemId: number;
    itemUpdateRequest: ItemUpdateRequest;
}

export interface UploadImageRequest {
    image: Blob;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * 상품 ID와 수량을 전달받아 장바구니에 항목을 추가합니다.
     * 장바구니에 상품 추가
     */
    async addItemToCartRaw(requestParameters: AddItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCartItemFetchResponse>> {
        if (requestParameters['cartItemCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'cartItemCreateRequest',
                'Required parameter "cartItemCreateRequest" was null or undefined when calling addItemToCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemCreateRequestToJSON(requestParameters['cartItemCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCartItemFetchResponseFromJSON(jsonValue));
    }

    /**
     * 상품 ID와 수량을 전달받아 장바구니에 항목을 추가합니다.
     * 장바구니에 상품 추가
     */
    async addItemToCart(requestParameters: AddItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCartItemFetchResponse> {
        const response = await this.addItemToCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 아이디에 해당되는 주문을 취소하고 총 주문 금액을 환불합니다.
     * 주문 취소 및 환불 API
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling cancelOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{order-id}`.replace(`{${"order-id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 아이디에 해당되는 주문을 취소하고 총 주문 금액을 환불합니다.
     * 주문 취소 및 환불 API
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 상품을 등록합니다.
     * 관리자 상품 등록
     */
    async createItemRaw(requestParameters: CreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'itemCreateRequest',
                'Required parameter "itemCreateRequest" was null or undefined when calling createItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemCreateRequestToJSON(requestParameters['itemCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 관리자가 상품을 등록합니다.
     * 관리자 상품 등록
     */
    async createItem(requestParameters: CreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.createItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 타임딜 정보와 아이템 리스트를 등록합니다.
     * 타임딜 등록
     */
    async createTimeDealRaw(requestParameters: CreateTimeDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseTimeDealCreateResponse>> {
        if (requestParameters['timeDealCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'timeDealCreateRequest',
                'Required parameter "timeDealCreateRequest" was null or undefined when calling createTimeDeal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/time-deals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeDealCreateRequestToJSON(requestParameters['timeDealCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseTimeDealCreateResponseFromJSON(jsonValue));
    }

    /**
     * 타임딜 정보와 아이템 리스트를 등록합니다.
     * 타임딜 등록
     */
    async createTimeDeal(requestParameters: CreateTimeDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseTimeDealCreateResponse> {
        const response = await this.createTimeDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 수량 1 감소
     * 장바구니 상품 수량 감소
     */
    async decreaseQuantityRaw(requestParameters: DecreaseQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCartItemFetchResponse>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling decreaseQuantity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items/{item-id}/decrease`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCartItemFetchResponseFromJSON(jsonValue));
    }

    /**
     * 수량 1 감소
     * 장바구니 상품 수량 감소
     */
    async decreaseQuantity(requestParameters: DecreaseQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCartItemFetchResponse> {
        const response = await this.decreaseQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 id로 상품을 삭제합니다.
     * 관리자 상품 삭제
     */
    async deleteItemRaw(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/items/{item-id}`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 관리자가 id로 상품을 삭제합니다.
     * 관리자 상품 삭제
     */
    async deleteItem(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.deleteItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 전체 주문을 페이징 및 정렬 처리해 조회합니다.
     * 주문 전체 조회 API
     */
    async fetchAllOrdersRaw(requestParameters: FetchAllOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponsePageResponseOrderFetchResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponsePageResponseOrderFetchResponseFromJSON(jsonValue));
    }

    /**
     * 전체 주문을 페이징 및 정렬 처리해 조회합니다.
     * 주문 전체 조회 API
     */
    async fetchAllOrders(requestParameters: FetchAllOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponsePageResponseOrderFetchResponse> {
        const response = await this.fetchAllOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품 종류 Id에 맞는 브랜드를 조회합니다.
     * 상품 종류에 따른 브랜드 조회
     */
    async findBrandByTypeRaw(requestParameters: FindBrandByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListBrandFetchResponse>> {
        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling findBrandByType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/brands/{type-id}`.replace(`{${"type-id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListBrandFetchResponseFromJSON(jsonValue));
    }

    /**
     * 상품 종류 Id에 맞는 브랜드를 조회합니다.
     * 상품 종류에 따른 브랜드 조회
     */
    async findBrandByType(requestParameters: FindBrandByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListBrandFetchResponse> {
        const response = await this.findBrandByTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품 종류를 전체 조회 합니다.
     * 상품 종류 전체 조회
     */
    async findTypeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseListTypeFetchResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseListTypeFetchResponseFromJSON(jsonValue));
    }

    /**
     * 상품 종류를 전체 조회 합니다.
     * 상품 종류 전체 조회
     */
    async findType(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseListTypeFetchResponse> {
        const response = await this.findTypeRaw(initOverrides);
        return await response.value();
    }

    /**
     * 상품을 상세 조회 합니다.
     * 상품 상세 조회
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseItemFetchResponse>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/{item-id}`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseItemFetchResponseFromJSON(jsonValue));
    }

    /**
     * 상품을 상세 조회 합니다.
     * 상품 상세 조회
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseItemFetchResponse> {
        const response = await this.getByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 진행중인 타임딜 및 타임딜 상품을 조회합니다.
     * 현재 진행 중인 타임딜
     */
    async getCurrentTimeDealsRaw(requestParameters: GetCurrentTimeDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponsePageResponseCurrentTimeDealFetchResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/time-deals/now`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponsePageResponseCurrentTimeDealFetchResponseFromJSON(jsonValue));
    }

    /**
     * 현재 진행중인 타임딜 및 타임딜 상품을 조회합니다.
     * 현재 진행 중인 타임딜
     */
    async getCurrentTimeDeals(requestParameters: GetCurrentTimeDealsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponsePageResponseCurrentTimeDealFetchResponse> {
        const response = await this.getCurrentTimeDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 id로 상품을 단건 조회합니다.
     * 관리자 상품 단건 조회
     */
    async getItemRaw(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseObject>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/items/{item-id}`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseObjectFromJSON(jsonValue));
    }

    /**
     * 관리자가 id로 상품을 단건 조회합니다.
     * 관리자 상품 단건 조회
     */
    async getItem(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseObject> {
        const response = await this.getItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 이름으로 상품을 검색 / 상품 목록을 조회합니다.
     * 관리자 상품 이름 검색 & 목록 조회
     */
    async getItemsRaw(requestParameters: GetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponsePageResponseAdminItemFetchResponse>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponsePageResponseAdminItemFetchResponseFromJSON(jsonValue));
    }

    /**
     * 관리자가 이름으로 상품을 검색 / 상품 목록을 조회합니다.
     * 관리자 상품 이름 검색 & 목록 조회
     */
    async getItems(requestParameters: GetItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponsePageResponseAdminItemFetchResponse> {
        const response = await this.getItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 로그인된 사용자의 장바구니를 조회합니다.
     * 내 장바구니 조회
     */
    async getMyCartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCartFetchResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCartFetchResponseFromJSON(jsonValue));
    }

    /**
     * 현재 로그인된 사용자의 장바구니를 조회합니다.
     * 내 장바구니 조회
     */
    async getMyCart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCartFetchResponse> {
        const response = await this.getMyCartRaw(initOverrides);
        return await response.value();
    }

    /**
     * 수량 1 증가
     * 장바구니 상품 수량 증가
     */
    async increaseQuantityRaw(requestParameters: IncreaseQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCartItemFetchResponse>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling increaseQuantity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items/{item-id}/increase`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCartItemFetchResponseFromJSON(jsonValue));
    }

    /**
     * 수량 1 증가
     * 장바구니 상품 수량 증가
     */
    async increaseQuantity(requestParameters: IncreaseQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCartItemFetchResponse> {
        const response = await this.increaseQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 장바구니의 모든 항목을 제거합니다.
     * 장바구니 전체 삭제
     */
    async removeAllItemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items/all`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 장바구니의 모든 항목을 제거합니다.
     * 장바구니 전체 삭제
     */
    async removeAllItems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.removeAllItemsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 장바구니에서 항목을 제거합니다.
     * 장바구니 항목 삭제
     */
    async removeItemToCartRaw(requestParameters: RemoveItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling removeItemToCart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items/{item-id}`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 장바구니에서 항목을 제거합니다.
     * 장바구니 항목 삭제
     */
    async removeItemToCart(requestParameters: RemoveItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.removeItemToCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 장바구니에서 선택한 항목들을 제거합니다.
     * 장바구니 선택 항목 삭제
     */
    async removeSelectedItemsRaw(requestParameters: RemoveSelectedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['cartItemDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'cartItemDeleteRequest',
                'Required parameter "cartItemDeleteRequest" was null or undefined when calling removeSelectedItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/cart/items`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemDeleteRequestToJSON(requestParameters['cartItemDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 장바구니에서 선택한 항목들을 제거합니다.
     * 장바구니 선택 항목 삭제
     */
    async removeSelectedItems(requestParameters: RemoveSelectedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.removeSelectedItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품을 조회하고 검색합니다.
     * 상품 조회 및 검색
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponsePageResponseItemFetchQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        if (requestParameters['brands'] != null) {
            queryParameters['brands'] = requestParameters['brands'];
        }

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponsePageResponseItemFetchQueryResponseFromJSON(jsonValue));
    }

    /**
     * 상품을 조회하고 검색합니다.
     * 상품 조회 및 검색
     */
    async search(requestParameters: SearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponsePageResponseItemFetchQueryResponse> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자 페이지에서 타임딜 목록을 조회합니다.
     * (관리자 페이지)타임딜 목록 조회
     */
    async searchTimeDealsRaw(requestParameters: SearchTimeDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponsePageResponseTimeDealFetchResponse>> {
        const queryParameters: any = {};

        if (requestParameters['timeDealName'] != null) {
            queryParameters['timeDealName'] = requestParameters['timeDealName'];
        }

        if (requestParameters['timeDealId'] != null) {
            queryParameters['timeDealId'] = requestParameters['timeDealId'];
        }

        if (requestParameters['timeDealItemName'] != null) {
            queryParameters['timeDealItemName'] = requestParameters['timeDealItemName'];
        }

        if (requestParameters['timeDealItemId'] != null) {
            queryParameters['timeDealItemId'] = requestParameters['timeDealItemId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/time-deals/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponsePageResponseTimeDealFetchResponseFromJSON(jsonValue));
    }

    /**
     * 관리자 페이지에서 타임딜 목록을 조회합니다.
     * (관리자 페이지)타임딜 목록 조회
     */
    async searchTimeDeals(requestParameters: SearchTimeDealsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponsePageResponseTimeDealFetchResponse> {
        const response = await this.searchTimeDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품 ID로 기존 상품의 이미지를 새 이미지로 교체
     * 관리자 상품 이미지 수정
     */
    async updateImageRaw(requestParameters: UpdateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseImageUploadResponse>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateImage().'
            );
        }

        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling updateImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        const response = await this.request({
            path: `/api/admin/items/{item-id}/image`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseImageUploadResponseFromJSON(jsonValue));
    }

    /**
     * 상품 ID로 기존 상품의 이미지를 새 이미지로 교체
     * 관리자 상품 이미지 수정
     */
    async updateImage(requestParameters: UpdateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseImageUploadResponse> {
        const response = await this.updateImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 id로 상품(재고, 가격, 이미지)을 수정합니다.
     * 관리자 상품 수정
     */
    async updateItemRaw(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseEmpty>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateItem().'
            );
        }

        if (requestParameters['itemUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'itemUpdateRequest',
                'Required parameter "itemUpdateRequest" was null or undefined when calling updateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/items/{item-id}`.replace(`{${"item-id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemUpdateRequestToJSON(requestParameters['itemUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseEmptyFromJSON(jsonValue));
    }

    /**
     * 관리자가 id로 상품(재고, 가격, 이미지)을 수정합니다.
     * 관리자 상품 수정
     */
    async updateItem(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseEmpty> {
        const response = await this.updateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 상품 등록 전 이미지를 S3에 업로드하고 URL 반환
     * 관리자 상품 이미지 업로드
     */
    async uploadImageRaw(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseImageUploadResponse>> {
        if (requestParameters['image'] == null) {
            throw new runtime.RequiredError(
                'image',
                'Required parameter "image" was null or undefined when calling uploadImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        const response = await this.request({
            path: `/api/admin/items/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseImageUploadResponseFromJSON(jsonValue));
    }

    /**
     * 상품 등록 전 이미지를 S3에 업로드하고 URL 반환
     * 관리자 상품 이미지 업로드
     */
    async uploadImage(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseImageUploadResponse> {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchTimeDealsStatusEnum = {
    Scheduled: 'SCHEDULED',
    Ongoing: 'ONGOING',
    Ended: 'ENDED'
} as const;
export type SearchTimeDealsStatusEnum = typeof SearchTimeDealsStatusEnum[keyof typeof SearchTimeDealsStatusEnum];
