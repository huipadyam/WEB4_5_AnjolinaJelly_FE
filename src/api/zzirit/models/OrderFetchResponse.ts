/* tslint:disable */
/* eslint-disable */
/**
 * zzirit API
 * 찌릿 API 명세서
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderItemFetchResponse } from './OrderItemFetchResponse';
import {
    OrderItemFetchResponseFromJSON,
    OrderItemFetchResponseFromJSONTyped,
    OrderItemFetchResponseToJSON,
    OrderItemFetchResponseToJSONTyped,
} from './OrderItemFetchResponse';

/**
 * 
 * @export
 * @interface OrderFetchResponse
 */
export interface OrderFetchResponse {
    /**
     * 
     * @type {Date}
     * @memberof OrderFetchResponse
     */
    orderDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof OrderFetchResponse
     */
    orderId?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderFetchResponse
     */
    orderNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderFetchResponse
     */
    totalPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderFetchResponse
     */
    orderStatus?: OrderFetchResponseOrderStatusEnum;
    /**
     * 
     * @type {Array<OrderItemFetchResponse>}
     * @memberof OrderFetchResponse
     */
    items?: Array<OrderItemFetchResponse>;
}


/**
 * @export
 */
export const OrderFetchResponseOrderStatusEnum = {
    Pending: 'PENDING',
    Paid: 'PAID',
    Failed: 'FAILED',
    Cancelled: 'CANCELLED',
    Completed: 'COMPLETED'
} as const;
export type OrderFetchResponseOrderStatusEnum = typeof OrderFetchResponseOrderStatusEnum[keyof typeof OrderFetchResponseOrderStatusEnum];


/**
 * Check if a given object implements the OrderFetchResponse interface.
 */
export function instanceOfOrderFetchResponse(value: object): value is OrderFetchResponse {
    return true;
}

export function OrderFetchResponseFromJSON(json: any): OrderFetchResponse {
    return OrderFetchResponseFromJSONTyped(json, false);
}

export function OrderFetchResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderFetchResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'orderDate': json['orderDate'] == null ? undefined : (new Date(json['orderDate'])),
        'orderId': json['orderId'] == null ? undefined : json['orderId'],
        'orderNumber': json['orderNumber'] == null ? undefined : json['orderNumber'],
        'totalPrice': json['totalPrice'] == null ? undefined : json['totalPrice'],
        'orderStatus': json['orderStatus'] == null ? undefined : json['orderStatus'],
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(OrderItemFetchResponseFromJSON)),
    };
}

export function OrderFetchResponseToJSON(json: any): OrderFetchResponse {
    return OrderFetchResponseToJSONTyped(json, false);
}

export function OrderFetchResponseToJSONTyped(value?: OrderFetchResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'orderDate': value['orderDate'] == null ? undefined : ((value['orderDate']).toISOString()),
        'orderId': value['orderId'],
        'orderNumber': value['orderNumber'],
        'totalPrice': value['totalPrice'],
        'orderStatus': value['orderStatus'],
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(OrderItemFetchResponseToJSON)),
    };
}

